|FILE DATA
2024-05-10 16:55 CEST. Kevin Csellak.

|MODELS

||FULL SIMPLE UNREDUCED MODEL (FSU):
model dependents/evaluables/variables: p, q, x, y, r, s
model behavioral parameters/coefficients: k1, k2, k3, k4
model initial values: p0, q0, x0, y0, r0, s0
model time derivative: (
    0,
    0,
    k1 * p - k2 * q * x + k3 * x * x * y - k4 * x,
    k2 * q * x - k3 * x * x * y,
    k2 * q * x,
    k4 * x
)

||TRUNCATED SIMPLE UNREDUCED MODEL (TSU):
model dependent variables: x, y
model behavioral parameters: k1, k2, k3, k4, p, q
model initial values: x0, y0
model time derivative: (
    k1 * p - k2 * q * x + k3 * x * x * y - k4 * x,
    k2 * q * x - k3 * x * x * y
)

||SIMPLE REDUCED MODEL (TSR):
model dependent variables: x, y
model behavioral parameters: kappa1, kappa2
model initial values: x0, y0
model time derivative: (
    x * x * y - x - kappa2 * x + kappa1,
    x - x * x * y
)

||SIMPLE QUODUCT MODEL (TSQ):
model dependent variables: x, y
model behavioral parameters: mu1, mu2
model initial values: x0, y0
model time derivative: (
    x * x * y - x - math.sqrt(mu2 / mu1) * x + math.sqrt(mu1 * mu2),
    x - x * x * y
)

|NOTABLE INFORMATION

||NI 1
The TSU model has at least one periodicizing solution here:
behavioral parameters: 0.19, 1.07, 0.85, 0.22, 0.59, 0.56
initial values: 0.83, 1.25
this will be called the (unreduced) established configuration.

||NI 2
The TSR model has at least one periodicizing solution here:
behavioral parameters: 0.2, 0.3
initial values: 1, 1
this will be called the (reduced) established configuration.

||NI 3
All sims were performed with the Radau method unless otherwise specified.

||NI 4
At any given point, in the reduced model, y is decreasing iff y * x > 1 and increasing iff y * x < 1.

||NI 5
For any equilibrium solution of the reduced model, we have x = kappa1/kappa2 and y = kappa2/kappa1.

||NI 6
x_red = x * math.sqrt(k3 / (k2 * q))
y_red = y * math.sqrt(k3 / (k2 * q));
t_red = t * k2 * q
kappa1 = math.sqrt(k3 / (k2 * q)) * k1 * p / (k2 * q)
kappa2 = k4 / (k2 * q)
mu1 = kappa1 / kappa2 = math.sqrt(k3 / (k2 * q)) * k1 * p / k4
mu2 = kappa1 * kappa2 = math.sqrt(k3 / (k2 * q)) * k1 * k4 * p / (k2**2 * q**2)

||NI 7
As found in the findings_1.txt document,
we can control the time scale and concentration scale (for x an y),
without affecting the shape of the graph (up to scalings, duh) at all.

|SIMS

||TSR SIM 1
model: TSR
investigating: effect on kappa1 in range [0, 2] on the established configuration.
behavioral parameters: [varies], 0.3
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 21
range for variation values: [0, 2]
time span: (0, 1000)
sim eval resolution or "granularity": 500 saved points
simulation run with tsr_range_investigations.py.
simulation run at 17:54.
saved as Figure_2_tsr_kappa1_investigations.png in the project2 folder.
Results:
A kappa1 of >= 0.3 results in smooth nearly monotonic convergence to an equilibrium state.
The convergence seems truly monotonic for at least kappa1 >= 0.8.
The equilibrium value for x increases with kappa1 according to the formula x_equi = kappa1 / 0.3.
The equilibrium value for y decreases with kappa1 in a sort-of-inversely proportional way.
The equation for the derivative of y shows that y_equi = 1 / x_equi = 0.3 / kappa_1.
Yes, this means that (1, 1) is indeed an equilibrium solution in the case kappa1 = kappa2 = 0.3.
In the case kappa1 = 0, x falls monotonically to or towards 0 and y rises to around or about 1.5.
In all these cases, x and y are indistinguishable from their limits before t = 20.
However, it is clear that the convergence gets quicker as kappa1 is lowered,
though the relation between rate of convergence and kappa1's value is unclear.
For kappa1 in {0.1, 0.2}, some form of periodic behavior occurs.
Notably, the graphed peak magnitude does not appear to be constant,
though this may be an issue with the "granularity" of our simulation,
i.e. the number of points at which the simulated state was saved.
A cursory look suggests the period of oscillation may decrease as kappa1 increases,
but this is by no means certain.
Similarly, the amplitude of the oscillations may decrease with kappa1.
We will further investigate these oscillations, and other behavior, next.
We note that we should decrease the number of interpolated values for kappa1,
or risk getting a jumbled mess of similarly colored wave curves,
without being able to glean anything from them other than maybe one or two general trends.

||TSR SIM 2
model: TSR
investigating: effect on kappa1 in range [0, 0.3] on the established configuration.
behavioral parameters: [varies], 0.3
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 7
range for variation values: [0, 0.3]
time span: (0, 400)
sim eval resolution or "granularity": 800 saved points
simulation run with tsr_range_investigations.py.
simulation run at 18:16.
saved as Figure_3_tsr_kappa1_investigations.png in the project2 folder.
Results:
The hypotheses put forth in the description of the previous simulation are gaining credibility.
The cases kappa1 = 0 and kappa1 = 0.3 have already been described in the previous simulation,
but it does not hurt to state that (1, 1) again appears to be an equilibrium solution,
for kappa1 = kappa2 = 0.3.
Let's start with the oscillation period. As kappa1 increases from 0 to 0.3 in steps of 0.05,
every value of kappa1 except for 0 and 0.3 yields an oscillating graph.
Or rather, the system very quickly converges to a periodic solution.
Due to the initial values for all the simulated configurations being equal to one another,
it's not clear whether we're actually dealing with truly periodic solutions,
or just convergence to such solutions.
We will not distinguish between the two in the current discussion for that reason.
As kappa1 increases, so does the frequency of oscillation.
at kappa1 = 0.05, the period of oscillation is around or about 225 time units,
near 60 at kappa1 = 0.1, near 30 at kappa1 = 0.15, near 20 at kappa1 = 0.2,
and near 15 at kappa1 = 0.25.
This suggests that the period of oscillation is inversely proportional to kappa1,
with the formula period = 60/(20 * kappa1 - 1). We will investigate this further.
The oscillations themselves have peculiar shapes.
For both x and y, the oscillations become more and more sinusoidal as kappa1 increases towards 0.3,
with the graphs at kappa1 = 0.25 being indistinguishable from sinusoids to my eyes.
At kappa1 = 0.05, the particular shapes of the graphs are very strongly pronounced.
For this value of kappa1, the graph for x is practically constant near 0.01 (eyeballed)
for most of the oscillation, namely from at least t=7 until at least t=210,
though it bends upwards slowly a bit as time goes on.
There is a very sharp spike at around t=218 appearing vertically throughout the vertical range
x=0.4 through x=8.5, though the peak value can be inaccurate due to granuarity issues.
After this peak, without a break, the graph falls down, nearly vertically at first,
but ending only at around t=230, where there is a noticable sharp bend in the the curve,
at the same height as the near-constant section that we started the oscillation at.
After this bend, the process starts again.
With y, it's a similar story, with two big differences.
Firstly, instead of staying near-constant with a very strong upshoot at the end,
y increases nearly linearly for the majority of the oscillation.
This linear increase starts at around t=4, y=1.5 and ends at around t=215, y=8.9,
where y starts bending down into a nosedive at t=218, where all the y gets converted into x
in a chain reaction. The nosedive stops at around t=219, y=0.1.
At this point, y does not start linearly increasing just yet.
Instead, it tends upwards at a certain rate which increases a litte bit over time,
up until around t=228, where at around y=1.4, the linear increase starts off again.
This linear increase is slower than the brief burst that precedes it.
Now for some amplitude-related figures.
The minimum value x assumes over the course of an oscillation increases monotonically with kappa1.
The rate of increase in this minimum as kappa1 is increased seems to be slow when kappa1 is near 0,
fast when kappa1 is in between 0.2 and 0.25, and a bit slower again when kappa1 is between 0.25 and 0.3.
We will investigate this further.
Conversely, with y, the maximum over the course of an oscillation decreases monotonically with kappa1.
There is one exception to this rule in the form of kappa1 = 0, but the corresponding solution
does not oscillate. Still, it seems useful to mention that the value y assumes at kappa1 = 0
does not appear to be the limit of the maximum value of y's oscillations as kappa1 tends to 0.
It is not clear what formulaic relation the minimum of x and maximum of y have to kappa1.
However, the maximum of y seems to have a somewhat inverse relation to it.
At kappa1=0.05, it is around 8.85. At kappa1=0.1, around 4.65. At kappa1=0.15, around 3.25.
At kappa1=0.2, around 2.45. At kappa1=0.25, around 1.35.
As kappa1 decreases, the slope of the linear section of y's oscillations decreases too.
Finally, we'll consider the maximum x assumes.
It's around 8.5 at kappa1=0.05; 4 at kappa1=0.1; 2.7 at kappa1=0.15; 2 at kappa1=0.2;
1 at kappa1=0.25. Again, granularity makes it very uncertain.
That concludes this investigation. We'll explore the range [0, 0.2] more thoroughly next.

||TSR SIM 3
model: TSR
investigating: effect on kappa1 in range [0, 0.2] on the established configuration i.t.o. oscillations.
behavioral parameters: [varies], 0.3
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 7
range for variation values: [0, 0.2]
time span: (0, 600)
granularity: 2400 saved points
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 09:28.
saved as Figure_4_tsr_kappa1_investigations.png in the project2 folder.
Results:
Wow. How coincidental.
The big shootup and dropdown for x and y respectively occur at more or less t=500 for kappa1=1/30.
For kappa1=2/30, x has peaks at around t=121, t=251, t=380, and t=510.
This suggests a period of around P=130 with a starting offset of around phi=121 for the peaks.
These peaks coincide with the troughs for y on the time axis.
In fact, peaks of x coincide with troughs for y for every value of kappa1 plotted here.
For kappa1=3/30, x has peaks at around t=54, t=114, t=174, t=233, t=293, t=353,
t=413, t=473, t=533, t=592. This suggests a period of around P=60 with starting offset phi=54.
For kappa1=4/30, we find roughly that P=36 with phi=31.
For kappa1=5/30, we find roughly P=25 with phi=21.
For kappa1=6/30, we find roughly P=19.5 with phi=17.
observed periods                           : ~510, 130, 60, 36, 25,   19.5
computed periods using P=60/(20*kappa1 - 1): -180, 180, 60, 36, 25.7, 20.
Clearly, the formula isn't accurate in a lot of cases, especially for lower kappa1.
We will investigate this further later.
The minimum values x assumes for various kappa1 are not easy to gauge from the plot.
The maximum values x assumes for various kappa1 are as follows:
around 12.7 for kappa1=1/30; around 6.3 for kappa1=2/30; around 4.2 for kappa1=3/30;
around 3 for kappa1=4/30; around 2.4 for kappa1=5/30; around 2 for kappa1=6/30.
The maxima y assumes are as follows:
around 13.1 for kappa1=1/30; around 6.75 for kappa1=2/30; around 4.6 for kappa1=3/30;
around 3.55 for kappa1=4/30; around 2.9 for kappa1=5/30; around 2.4 for kappa1=6/30.
No conclusions are evident.

||TSR SIM 4
model: TSR
investigating: effect on kappa1 in range [0.2, 0.3] on the established configuration i.t.o. oscillations.
behavioral parameters: [varies], 0.3
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 11
range for variation values: [0.2, 0.3]
time span: (0, 100)
granularity: 800 saved points
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 10:40.
saved as Figure_5_tsr_kappa1_investigations.png in the project2 folder.
Results:
We see that the oscillations may not have stabilized yet by t=100.
Those with kappa1<=0.24 seem to still be rising in both maximum and minimum value of both x and y,
those with kappa1>=0.27 have already converged to a fixed point,
and those with 0.25<=kappa1<=0.26 decreasing in maximum and minimum value of both x and y.
Two sidetracks (see the sidetrack saved images) show that kappa1<=0.2506 definitely don't
converge to a fixed point eventually while those with kappa1>=0.251 definitely do.
The furthest either of these two sidetracks was simulated til was t=6400.

||TSR SIM 5
model: TSR
investigating: effect on kappa1 in range [0.2, 0.3] on the established configuration i.t.o. oscillations.
behavioral parameters: [varies], 0.3
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 11
range for variation values: [0.2, 0.3]
time span: (0, 800)
granularity: 6400 saved points
time interval plotted: [700, 800]
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 11:01.
saved as Figure_6_tsr_kappa1_investigations.png in the project2 folder.
Results:
Eh. Too unfocused to really analyse it now.

||TSR SIM 6
model: TSR
investigating: effect of kappa2 in range [0, 2] on the established configuration.
behavioral parameters: 0.2, [varies]
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 21
range for variation values: [0, 2]
time span: (0, 1000)
granularity: 4000 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 11:08.
saved as Figure_tsr_kappa2_investigations_1.png in the project2 folder.
Results:
For kappa2=0, the graph for x is nearly linear and increasing,
to the point where the plot lines for the other values of kappa2 are barely discernible.
I launched a sidetrack to see whether it was actually kappa2=0 or something like kappa2=0.125;
those are hard to discern in terms of plot line color.
It turns out that it is indeed kappa2=0.
The reason for this linear plot is that the time derivative of y in the reduced model is negative
if and only if y is greater than one over x, and positive iff less than that.
In the case kappa2=0, the rate of increase of x is always exactly kappa1 minus the rate of decrease of y.
Seen as there is no "braking" effect that a positive kappa2 would bring about,
x manages to increase at the very start while y stays roughly constant for a split second.
(Well, in theory, with infinitessimals. In practice,
many ODE solvers will see y decrease from the very start due to the way they solve ODEs.)
Now, y is greater than 1/x and will thus decrease.
Seen as x increases by kappa1 minus the rate of decrease of y,
and seen as a rise with rate kappa1 on its own is enough to let 1/x decrease faster than y does
(for some reason that isn't clear to me),
it follows that y will always keep decreasing.
The overall contribution of the terms x * x * y - x to the derivative of x is small
in comparison to the term kappa1, so x increases very rapidly, especially
when compared to the plots for other values of kappa2.
But enough about that. We'll remove kappa2=0 from our plot and redo the simulation.

||TSR SIM 7
model: TSR
investigating: effect of kappa2 in range (0, 2] on the established configuration.
behavioral parameters: 0.2, [varies]
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 20
range for variation values: (0, 2] by taking 21 values in range [0, 2] and dropping lowest
time span: (0, 1000)
granularity: 4000 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 11:41.
saved as Figure_tsr_kappa2_investigations_2.png in the project2 folder.
Results:
Well, this is more or less just as unintelligible as before, but for other reasons.
Some of the plots for x, that are drawn overtop other plots, have a very small period
of oscillation and high amplitude relative to the plotted time span, and their similar
colors make it hard to discern anything. This effect is less pronounced in the plot for y.
We will therefore split this investigation up into two parts, based on whether the plots
seem to benefit from larger or smaller plotted time spans.

||TSR SIM 8
model: TSR
investigating: effect of kappa2 in range [1, 2] on the established configuration.
behavioral parameters: 0.2, [varies]
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 11
range for variation values: [1, 2]
time span: (0, 1000)
granularity: 4000 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 11:46.
saved as Figure_tsr_kappa2_investigations_3.png in the project2 folder.
Results:
It is clear that x likes lying in the range [0, 0.25] for these values of kappa2,
while y likes lying in the range [4.5, 10.5].
x almost immediately drops to a value in between 0.05 and 0.11 (higher kappa2 yields lower values here),
and then climbs up to a "nicer" value while y gradually increases to what it considers a nice value.
This gradual climbing takes longer when kappa2 is higher.
Once there, x and y converge to fixed values. The fixed value for x is smaller for larger kappa2,
while the value for y rises with kappa2.
For lower values of kappa2, x and y first do a little oscillating dance once they reach the nice values,
which converges into fixed values as time goes on. No oscillations can be discerned after t=300.
Interestingly, the fixed values y converges to seem to be linearly dependent on kappa2,
with the formula y_equi = 5 * kappa2.
I've just derived the fact that we always have x_equi = kappa1/kappa2 and y_equi = kappa2/kappa1.
So, well, let's move on. This ain't interesting for out clocks.

||TSR SIM 9
model: TSR
investigating: effect of kappa2 in range (0, 1) on the established configuration.
behavioral parameters: 0.2, [varies]
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 9 because 11 minus 2
range for variation values: (0, 1) by removing 0 and 1 from [0, 1]
time span: (0, 200)
granularity: 1600 saved points
time interval plotted: full
Color spectrum changed for legibility at all.
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 12:29.
saved as Figure_tsr_kappa2_investigations_4.png in the project2 folder.
Results:
Interesting. The maximum value for x does not increase monotonically with kappa2 for the entire range.
Specifically, the value with kappa2=0.9 is lower than with kappa2 = 0.8.
Other than that, it is strictly increasing, save for the non-oscillating kappa2=0.1 and kappa2=0.2.
The maximum for y does increase monotonically with kappa2, even including kappa2=0.1 and 0.2.
Increasing kappa2 generally seems to increase the oscillation period and the amplitude of the waves.
Again, (1, 1) is a fixed point for kappa2=0.2. This now makes sense, given the formulas for x_equi and y_equi.
Oh, wait. That means I can now actually calculate the amplitude of the waves on either side of the equilibrium.
Oh well. That's something for another day, I guess.
Interestingly enough, the minimum value for y always hovers around 0.5 regardless of kappa2 (when oscillating).
The exception to this is kappa2=0.9, where it's slightly higher.
I think it would be wise to inspect the range [0.8, 1] a bit further.

||TSR SIM 10
model: TSR
investigating: effect of kappa2 in range [0.8, 1] on the established configuration.
behavioral parameters: 0.2, [varies]
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 11
range for variation values: [0.8, 1]
time span: (0, 400)
granularity: 6400 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 12:44.
saved as Figure_tsr_kappa2_investigations_5.png in the project2 folder.
Results:
well, the graph speaks for itself, doesn't it.
I'm getting very hyperactive.
I wanna go investigate more interesting stuff.

||TSR SIM 11
model: TSR
investigating: effect of x0 in range [0, 2] on the established configuration.
behavioral parameters: 0.2, 0.3
initial values: [varies], 1
varied item base value: 0
variation type: additive
interpolated variation values: 21
range for variation values: [0, 2]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 12:57.
saved as Figure_tsr_x0_investigations_1.png in the project2 folder.
Results:
That's so interesting.
Changing x0 in this range does not affect the eventual oscillations in the slightest.

||TSR SIM 12
model: TSR
investigating: effect of x0 in range [0, 20] on the established configuration.
behavioral parameters: 0.2, 0.3
initial values: [varies], 1
varied item base value: 0
variation type: additive
interpolated variation values: 21
range for variation values: [0, 20]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 12:59.
saved as Figure_tsr_x0_investigations_2.png in the project2 folder.
Results:
Yup. Changing x0 does nothing. It always converges to the same solution,
up to phase shift.

||TSR SIM 13
model: TSR
investigating: effect of y0 in range [0, 2] on the established configuration.
behavioral parameters: 0.2, 0.3
initial values: 1, [varies]
varied item base value: 0
variation type: additive
interpolated variation values: 21
range for variation values: [0, 2]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 13:02.
saved as Figure_tsr_y0_investigations_1.png in the project2 folder.
Results:
Interesting. Changing y0 also doesn't affect the eventual behavior,
but unlike when we varied x0, changing y0 does affect the way x behaves in the start considerably.
It drags x upwards to about the same value y has at that point, before they both swoop back down.
Next up: investigating what happens around the fixed point.
After that, looking into kappa1/kappa2 and kappa1 * kappa2 as parameters to play with.

||TSR SIM 14
model: TSR
investigating: effect of (x0, y0) around (2/3, 3/2) on fixed point.
behavioral parameters: 0.2, 0.3
initial values: [varies], [varies]
varied item base value: [2/3, 3/2]
variation type: multiplicative
interpolated variation values: 5 times 5
range for variation (scale) values: [0.75, 1.25]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 13:27.
saved as Figure_tsr_initials_investigations_1.png and Figure_tsr_initials_investigations_2.png in the project2 folder.
Results:
As you can see, we're definitely not close enough to the fixed point to see anything interesting.
Yeah, yeah. The colors aren't great. Deal with it; I still need to implement OKLab.

||TSR SIM 15
model: TSR
investigating: effect of (x0, y0) around (2/3, 3/2) on fixed point.
behavioral parameters: 0.2, 0.3
initial values: [varies], [varies]
varied item base value: [2/3, 3/2]
variation type: multiplicative
interpolated variation values: 5 times 5
range for variation (scale) values: [0.975, 1.025]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 13:30.
saved as Figure_tsr_initials_investigations_3.png in the project2 folder.
Results:
Ok, we're getting closer. But we definitely need to go even closer.

||TSR SIM 16
model: TSR
investigating: effect of (x0, y0) around (2/3, 3/2) on fixed point.
behavioral parameters: 0.2, 0.3
initial values: [varies], [varies]
varied item base value: [2/3, 3/2]
variation type: multiplicative
interpolated variation values: 5 times 5
range for variation (scale) values: [0.99975, 1.00025]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
simulation run with tsr_range_investigations.py.
simulation run at 2024-05-11 13:31.
saved as Figure_tsr_initials_investigations_4.png in the project2 folder.
Results:
Yeah, it's clear that this is an unstable equilibrium.
If you start off on one side of it, you're sent half a period offset in phase away from the other side,
but you'll always end up converging to the same periodic solution, up to phase offset.

||TSQ SIM 1
model: TSQ
investigating: effect of mu1 in range (0, 1] on fixed point.
behavioral parameters: [varies], 3/50
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 60 because 61 minus 1
range for variation values: (0, 1] by removing 0 from [0, 1]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
color spectrum broadened.
simulation run with tsq_range_investigations.py.
simulation run at 2024-05-11 18:28.
saved as Figure_tsq_mu1_investigations_1.png in the project2 folder.
Results:
Though this is fascinating and a lot _can_ be gleaned from these sims,
I think it'd be beneficial to take fewer interpolated values to illustrate the points better.

||TSQ SIM 2
model: TSQ
investigating: effect of mu1 in range (0, 1] on fixed point.
behavioral parameters: [varies], 3/50
initial values: 1, 1
varied item base value: 0
variation type: additive
interpolated variation values: 10 because 11 minus 1
range for variation values: (0, 1] by removing 0 from [0, 1]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
color spectrum broadened.
simulation run with tsq_range_investigations.py.
simulation run at 2024-05-11 18:30.
saved as Figure_tsq_mu1_investigations_2.png in the project2 folder.
Results:
We see that mu1 doesn't just affect the equilibrium values.
Lower values of mu1 correspond to spikier, less sinusoidal graphs,
as we've seen before with the effect of kappa1.
lower values of mu1 also correspond to longer periods of oscillation,
and higher amplitudes on both sides of the waves for both x and y.
We see that some values of mu1 close to 1 lead to x and y devolving into a fixed point.
The threshold for this happening should be investigated further,
but that should probably be done on a 2d plot where "time until solution dies off" is graphed
as a dependent variable on the z-axis against kappa1 and kappa2 on the horizontal plane.

||TSQ SIM 3
model: TSQ
investigating: does mu = (9/10, 3/50) have a stable solution?
behavioral parameters: 9/10, 3/50
initial values: [varies], [varies]
varied item base value: [9/10, 10/9]
variation type: multiplicative
interpolated variation values: 5 times 5
range for variation (scale) values: [0.99975, 1.00025]
time span: (0, 100)
granularity: 1600 saved points
time interval plotted: full
2d color spectrum.
simulation run with tsq_range_investigations.py.
simulation run at 2024-05-11 19:33.
saved as Figure_tsq_stability_investigations_1.png in the project2 folder.
Results:

||TSQ SIM 4
model: TSQ
investigating: does mu = (9/10, 3/50) have a stable solution?
behavioral parameters: 9/10, 3/50
initial values: [varies], [varies]
varied item base value: [9/10, 10/9]
variation type: multiplicative
interpolated variation values: 5 times 5
range for variation (scale) values: [0.99975, 1.00025]
time span: (0, 100)
granularity: 12800 saved points
time interval plotted: full
2d color spectrum.
simulation run with tsq_range_investigations.py.
simulation run at 2024-05-11 19:35.
saved as Figure_tsq_stability_investigations_2.png in the project2 folder.
Results:

||TSQ SIM 5
model: TSQ
investigating: does mu = (9/10, 3/50) have a stable solution?
behavioral parameters: 9/10, 3/50
initial values: [varies], [varies]
varied item base value: [9/10, 10/9]
variation type: multiplicative
interpolated variation values: 2 times 2
range for variation (scale) values: [0.99975, 1)
time span: (0, 100)
granularity: 102400 saved points
time interval plotted: full
2d color spectrum.
simulation run with tsq_range_investigations.py.
simulation run at 2024-05-11 19:40.
saved as Figure_tsq_stability_investigations_3.png in the project2 folder.
Results:
Yup. Code must be broken.
We've come to the conclusion that solving method inaccuracy causes inaccuracies to pile up,
which in turn causes the solution to collapse into a fixed point.
(the perpetrating values I investigated were x=0.8998167843549414, y=1.1112388453809450.)

I've also run a mu2 investigation (ha! Mewtwo).
The next thing I want to look for, is how to keep [enter property here] constant while varying mu1;
that'll form the basis for a parametrization nu1=mu1, nu2=F(mu1, mu2).
So TBC.
